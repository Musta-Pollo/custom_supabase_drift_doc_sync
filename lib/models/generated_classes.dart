// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison

// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the SudaDart configuration.

// SDK
import 'package:supabase_flutter/supabase_flutter.dart';

// No Intl package needed
// No Dart Convert needed
// Supadart Class
abstract class SupadartClass<T> {
  static Map<String, dynamic> insert(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  static Map<String, dynamic> update(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  factory SupadartClass.fromJson(Map<String, dynamic> json) {
    throw UnimplementedError();
  }

  static converter(List<Map<String, dynamic>> data) {
    throw UnimplementedError();
  }

  static converterSingle(Map<String, dynamic> data) {
    throw UnimplementedError();
  }
}

// Supabase Client Extension
extension SupadartClient on SupabaseClient {
  SupabaseQueryBuilder get task => from('task');
  SupabaseQueryBuilder get project => from('project');
}

// Supabase Storage Client Extension
extension SupadartStorageClient on SupabaseStorageClient {}

// Enums

// Utils
class Task implements SupadartClass<Task> {
  final String id;
  final DateTime createdAt;
  final DateTime updatedAt;
  final DateTime? deletedAt;
  final String name;
  final String projectId;
  final String userId;
  final DateTime serverCreatedAt;
  final DateTime serverUpdatedAt;

  const Task({
    required this.id,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
    required this.name,
    required this.projectId,
    required this.userId,
    required this.serverCreatedAt,
    required this.serverUpdatedAt,
  });

  static String get table_name => 'task';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_deletedAt => 'deleted_at';
  static String get c_name => 'name';
  static String get c_projectId => 'project_id';
  static String get c_userId => 'user_id';
  static String get c_serverCreatedAt => 'server_created_at';
  static String get c_serverUpdatedAt => 'server_updated_at';

  static List<Task> converter(List<Map<String, dynamic>> data) {
    return data.map(Task.fromJson).toList();
  }

  static Task converterSingle(Map<String, dynamic> data) {
    return Task.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    String? name,
    String? projectId,
    String? userId,
    DateTime? serverCreatedAt,
    DateTime? serverUpdatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (deletedAt != null) 'deleted_at': deletedAt.toUtc().toIso8601String(),
      if (name != null) 'name': name,
      if (projectId != null) 'project_id': projectId,
      if (userId != null) 'user_id': userId,
      if (serverCreatedAt != null)
        'server_created_at': serverCreatedAt.toUtc().toIso8601String(),
      if (serverUpdatedAt != null)
        'server_updated_at': serverUpdatedAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    required String name,
    required String projectId,
    required String userId,
    DateTime? serverCreatedAt,
    DateTime? serverUpdatedAt,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      name: name,
      projectId: projectId,
      userId: userId,
      serverCreatedAt: serverCreatedAt,
      serverUpdatedAt: serverUpdatedAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    String? name,
    String? projectId,
    String? userId,
    DateTime? serverCreatedAt,
    DateTime? serverUpdatedAt,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      name: name,
      projectId: projectId,
      userId: userId,
      serverCreatedAt: serverCreatedAt,
      serverUpdatedAt: serverUpdatedAt,
    );
  }

  factory Task.fromJson(Map<String, dynamic> jsonn) {
    return Task(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      deletedAt: jsonn['deleted_at'] != null
          ? DateTime.parse(jsonn['deleted_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      projectId:
          jsonn['project_id'] != null ? jsonn['project_id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      serverCreatedAt: jsonn['server_created_at'] != null
          ? DateTime.parse(jsonn['server_created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      serverUpdatedAt: jsonn['server_updated_at'] != null
          ? DateTime.parse(jsonn['server_updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      name: name,
      projectId: projectId,
      userId: userId,
      serverCreatedAt: serverCreatedAt,
      serverUpdatedAt: serverUpdatedAt,
    );
  }

  Task copyWith({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    String? name,
    String? projectId,
    String? userId,
    DateTime? serverCreatedAt,
    DateTime? serverUpdatedAt,
  }) {
    return Task(
      id: id ?? this.id,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      deletedAt: deletedAt ?? this.deletedAt,
      name: name ?? this.name,
      projectId: projectId ?? this.projectId,
      userId: userId ?? this.userId,
      serverCreatedAt: serverCreatedAt ?? this.serverCreatedAt,
      serverUpdatedAt: serverUpdatedAt ?? this.serverUpdatedAt,
    );
  }
}

class Project implements SupadartClass<Project> {
  final String id;
  final DateTime createdAt;
  final DateTime updatedAt;
  final DateTime? deletedAt;
  final String name;
  final String userId;

  const Project({
    required this.id,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
    required this.name,
    required this.userId,
  });

  static String get table_name => 'project';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_deletedAt => 'deleted_at';
  static String get c_name => 'name';
  static String get c_userId => 'user_id';

  static List<Project> converter(List<Map<String, dynamic>> data) {
    return data.map(Project.fromJson).toList();
  }

  static Project converterSingle(Map<String, dynamic> data) {
    return Project.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    String? name,
    String? userId,
  }) {
    return {
      if (id != null) 'id': id,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (deletedAt != null) 'deleted_at': deletedAt.toUtc().toIso8601String(),
      if (name != null) 'name': name,
      if (userId != null) 'user_id': userId,
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    required String name,
    required String userId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      name: name,
      userId: userId,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    String? name,
    String? userId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      name: name,
      userId: userId,
    );
  }

  factory Project.fromJson(Map<String, dynamic> jsonn) {
    return Project(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      deletedAt: jsonn['deleted_at'] != null
          ? DateTime.parse(jsonn['deleted_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      deletedAt: deletedAt,
      name: name,
      userId: userId,
    );
  }

  Project copyWith({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? deletedAt,
    String? name,
    String? userId,
  }) {
    return Project(
      id: id ?? this.id,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      deletedAt: deletedAt ?? this.deletedAt,
      name: name ?? this.name,
      userId: userId ?? this.userId,
    );
  }
}
